Second Order Tetra
==================

The app is a simple flask script that responds to /tetra/X and calculates second
order tetra calculations. There is also an haproxy config file to show off how
to scale the script using a load balancer.

Initial Setup
---------------

```bash
# set up your virtual environment (optional)
virtualenv venv
source venv/bin/activate

# install flask
pip install -r requirements.txt
```

Test Single Instance
--------------------

# run the server
python server.py 4000

# test it:
siege -c 100 -r -b http://localhost:4000/tetra/10000
# result: 28 requests/sec

Set Up A Cluster
----------------

# install haproxy
apt-get install haproxy

Test the cluster
----------------

# spin up a 'cluster'
python server.py 9000 &
python server.py 9001 &
python server.py 9002 &
python server.py 9003 &

# run haproxy
haproxy -V -f haproxy.cfg

# verify health checks
# visit http://localhost:8888/

# benchmark it!
siege -c 1000 -r -b http://localhost:8000/tetra/10000
# result: 90 req/sec

========================================

For a tetra of 140, 100 concurrent users
Go: 
15000 r/sec (4 load balanced instances)
12800 r/sec (single instance)

Python:
5900 r/sec (4 load balanced instances)
2100 r/sec (single instance)

-----------------------------------------

For a tetra of 140, 500 concurrent users
Go:
7000 r/sec (load balanced)
6127 r/sec (single instance)

Python:
4700 r/sec (load balanced)
735 r/sec (single instance) (connection refused after second run)
